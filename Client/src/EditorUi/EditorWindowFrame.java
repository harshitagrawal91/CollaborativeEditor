package EditorUi;
import clientObjects.writeQueueMessage;
import constants.GlobalConstants;
import java.awt.Color;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Kunal, Akshay Sehgal
 */
public class EditorWindowFrame extends javax.swing.JFrame {

	/**
	 * Creates new form Editor
	 */
	public EditorWindowFrame() throws IOException {
//        this.frameID = frameID;
		initComponents();
		System.out.println("this.frameID: " + this.frameID);
		System.out.println("passed frameID:" + frameID);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form EditorWindowFrame.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		writingArea = new javax.swing.JTextArea();
		fixedDocumentNameTag = new javax.swing.JLabel();
		saveButton = new javax.swing.JButton();
		fixedUniqueIdtag = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		editableUniqueIdTag = new javax.swing.JLabel();
		updateDocumentTag = new javax.swing.JButton();
		documentName = new java.awt.TextField();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		writingArea.setColumns(20);
		writingArea.setForeground(new java.awt.Color(153, 153, 153));
		writingArea.setRows(5);
		writingArea.setText("Write here...");
		writingArea.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				writingAreaFocusGained(evt);
			}

			public void focusLost(java.awt.event.FocusEvent evt) {
				writingAreaFocusLost(evt);
			}
		});
		writingArea.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				writingAreaKeyPressed(evt);
			}

			public void keyReleased(java.awt.event.KeyEvent evt) {
				writingAreaKeyReleased(evt);
			}
		});
		jScrollPane1.setViewportView(writingArea);

		fixedDocumentNameTag.setText("Document Name");

		saveButton.setText("Save");

		fixedUniqueIdtag.setText("Unique ID: ");

		//editableUniqueIdTag.setText("Unassigned");

		updateDocumentTag.setText("Update");
		updateDocumentTag.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				updateDocumentTagActionPerformed(evt);
			}
		});

		documentName.setText("textField1");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup().addGroup(layout
								.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1)
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(layout.createSequentialGroup().addComponent(fixedUniqueIdtag)
														.addPreferredGap(
																javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(editableUniqueIdTag)))
										.addGap(0, 0, Short.MAX_VALUE)))
								.addContainerGap())
						.addGroup(layout.createSequentialGroup()
								.addComponent(fixedDocumentNameTag, javax.swing.GroupLayout.PREFERRED_SIZE, 137,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(31, 31, 31)
								.addComponent(documentName, javax.swing.GroupLayout.PREFERRED_SIZE, 734,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 194,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, Short.MAX_VALUE).addComponent(updateDocumentTag)
								.addGap(203, 203, 203)))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(1, 1, 1)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(fixedUniqueIdtag).addComponent(editableUniqueIdTag))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(documentName, javax.swing.GroupLayout.PREFERRED_SIZE, 29,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(fixedDocumentNameTag).addComponent(jLabel3)
										.addComponent(updateDocumentTag)))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
						.addGap(1, 1, 1).addComponent(saveButton).addGap(8, 8, 8)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	public void setInitial() {

		SwingWorker sw1 = new SwingWorker() {

			@Override
			protected Boolean doInBackground() throws Exception {

				editableUniqueIdTag.setText(GlobalConstants.clientId.toString());
				System.out.println(GlobalConstants.clientId);
				documentName.setForeground(Color.BLACK);
				documentName.setText(GlobalConstants.documentName.toString());
				writingArea.setForeground(Color.BLACK);
				writingArea.setText(GlobalConstants.text.toString());
				return true;
			}

			@Override
			protected void done() {

			}
		};

		// executes the swingworker on worker thread
		sw1.execute();
	}

	public void insertCharInWritingArea(String s, int pos) {

		SwingWorker sw1 = new SwingWorker() {

			@Override
			protected Boolean doInBackground() throws Exception {

				writingArea.insert(s, pos);
				return true;
			}

			@Override
			protected void done() {

			}
		};

		// executes the swingworker on worker thread
		sw1.execute();
	}

	public void updateDocumentName(String s) {

		SwingWorker sw1 = new SwingWorker() {

			@Override
			protected Boolean doInBackground() throws Exception {
				GlobalConstants.documentName.replace(0, documentName.getSelectionEnd(), documentName.getText());
				return true;
			}

			@Override
			protected void done() {

			}
		};

		// executes the swingworker on worker thread
		sw1.execute();
	}

	public void deleteCharacter(int pos) {

		SwingWorker sw1 = new SwingWorker() {

			@Override
			protected Boolean doInBackground() throws Exception {
				StringBuffer s = new StringBuffer(writingArea.getText());
				s.deleteCharAt(pos);
				writingArea.setText(s.toString());
				return true;
			}

			@Override
			protected void done() {
				writingArea.revalidate();
				writingArea.repaint();
			}
		};

		// executes the swingworker on worker thread
		sw1.execute();
	}

	private void writingAreaFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_writingAreaFocusGained
		if (writingArea.getText().equals("Write here...")) {
			writingArea.setText(null);
			writingArea.setForeground(Color.black);
		}
	}// GEN-LAST:event_writingAreaFocusGained

	private void writingAreaFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_writingAreaFocusLost
		if (writingArea.getText().isEmpty()) {
			writingArea.setForeground(Color.GRAY);
			writingArea.setText("Write here...");
		}
	}// GEN-LAST:event_writingAreaFocusLost

	public void writingAreaKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_writingAreaKeyPressed
		int position = writingArea.getSelectionStart();
		int endPosition = writingArea.getSelectionEnd();
		char c = evt.getKeyChar();
		String ch = Character.toString(c);

		if (evt.getKeyCode() == 8) {
			if (position == endPosition) {
				writeQueueMessage msg = new writeQueueMessage(GlobalConstants.messageType.DELETE.getValue(),
						position - 1, Character.toString(' '));
				GlobalConstants.writer.getMessage().add(msg);
			} else if (position != endPosition && endPosition > position) {
				for (int i = position; i < endPosition; i++) {
					writeQueueMessage msg = new writeQueueMessage(GlobalConstants.messageType.DELETE.getValue(),
							position, Character.toString(' '));
					GlobalConstants.writer.getMessage().add(msg);
				}
			}
		} else {
			// String ch = evt.getKeyText(evt.getKeyCode());
			// need to pass object of type write Queue Message
			writeQueueMessage msg = new writeQueueMessage(GlobalConstants.messageType.INSERT.getValue(), position, ch);
			GlobalConstants.writer.getMessage().add(msg);
		}
		if (GlobalConstants.writer.getState().equals(Thread.State.WAITING)) {
			synchronized (GlobalConstants.writer) {
				GlobalConstants.writer.notify();
			}
		}
	}// GEN-LAST:event_writingAreaKeyPressed

	private void writingAreaKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_writingAreaKeyReleased
		// TODO add your handling code here:
	}// GEN-LAST:event_writingAreaKeyReleased

	private void updateDocumentTagActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_updateDocumentTagActionPerformed
		updateDocumentName(documentName.getText());
	}// GEN-LAST:event_updateDocumentTagActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public void invoke() {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditorWindowFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditorWindowFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditorWindowFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditorWindowFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
//                 update();
				try {
					new EditorWindowFrame().setVisible(true);
//                     update(this.getGraphics());
				} catch (IOException ex) {
					Logger.getLogger(EditorWindowFrame.class.getName()).log(Level.SEVERE, null, ex);
				}
				writingArea.setText("hello");
				writingArea.updateUI();
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	public java.awt.TextField documentName;
	public javax.swing.JLabel editableUniqueIdTag;
	private javax.swing.JLabel fixedDocumentNameTag;
	private javax.swing.JLabel fixedUniqueIdtag;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton saveButton;
	private javax.swing.JButton updateDocumentTag;
	public javax.swing.JTextArea writingArea;
	// End of variables declaration//GEN-END:variables
	Scanner scanner;
	int frameID;
}